import io
import re
import csv
import chardet
import streamlit as st

# -------------------------------
# Config
# -------------------------------
FINAL_HEADER = ('√Årea/Processo envolvido,Respons√°vel SAC,C√≥digo da Ocorr√™ncia,Assunto,Tipo,Status,'
                'Propriet√°rio do SAC Name,Hora de Cria√ß√£o,Hora da modifica√ß√£o,Encerrado em,'
                'Solu√ß√£o de Ensino,Tipo de Venda,C√≥digo SGE,Escola Nome,CNPJ,Raz√£o Social,'
                'Rua de Entrega,Cidade de Entrega,Estado de Entrega,CEP de Entrega,'
                'Contato atualizado,Telefone,Solicita√ß√£o,Filial de origem,RMA DEV. VENDA,RMA 2,'
                'NF para aplica√ß√£o de cr√©dito (Financeiro),Nome da transportadora.,'
                'Cliente ir√° contratar o frete?,"Cliente vai contratar frete, info a transportadora",'
                'N¬∫ do pedido SGE,NF Remessa LNE,N¬∫ da nota de origem,'
                'Qual a flexibilidade de data/hor√°rio sugeridas?,An√°lise Realizada - Log√≠stica,'
                'Parecer da Log√≠stica,NF DEV.COLETA,NF Faturamento,Material Conforme?,'
                'Motivo N√£o Conformidade,Observa√ß√µes Log√≠stica,NF DEV.VENDA FATURAMENTO.,'
                'NF DEV.LOJA FATURAMENTO,NF DEV. SIMP.FAT,N√∫mero contato,'
                'Hor√°rio dispon√≠vel para coleta,Respons√°vel pela entrega,Tem restri√ß√£o de acesso?')

LOG_START_RX = re.compile(r'^\s*["`\']*\s*log[√≠i]stica', re.IGNORECASE)
EXCEL_CELL_LIMIT = 32767  # limite do Excel por c√©lula

# -------------------------------
# Helpers
# -------------------------------
def detect_decode(data: bytes) -> str:
    try:
        return data.decode("latin-1")
    except UnicodeDecodeError:
        enc = (chardet.detect(data).get("encoding") or "utf-8")
        return data.decode(enc, errors="replace")

def normalize_newlines(text: str) -> str:
    return text.replace("\r\n", "\n").replace("\r", "\n")

def first_field(line: str) -> str:
    i = line.find(";")
    part = line if i < 0 else line[:i]
    part = part.strip()
    if part.startswith('"') and part.endswith('"') and len(part) >= 2:
        part = part[1:-1]
    return part

def is_start(line: str) -> bool:
    s = re.sub(r'^[\uFEFF\s"\'`]+', '', line or '')
    return bool(LOG_START_RX.match(s))

def clean_header_by_name(header: str, filename: str) -> str:
    if re.search(r"sql_SAC_LogDevolucao_CQT", filename, re.I):
        header = header.replace("An√°lise Realizada - Log√≠stica.", "An√°lise Realizada - Log√≠stica")
    if re.search(r"sql_SAC__LogDevolucao_SPE", filename, re.I):
        header = header.replace("Respons√°vel pela entrega .", "Respons√°vel pela entrega")
    return header

def rebuild_records(lines):
    """Concatena as linhas exatamente como vieram (sem inserir/remover caracteres)."""
    out, buf = [], ""
    for ln in lines:
        if is_start(ln):
            if buf:
                out.append(buf)
            buf = ln
        else:
            if not buf:
                buf = ln
            else:
                buf += ln
    if buf:
        out.append(buf)
    return out

# -------------------------------
# Sa√≠das
# -------------------------------
def build_onecol_csv(final_lines):
    # CSV de 1 coluna; cada string vira uma linha
    buff = io.StringIO()
    w = csv.writer(buff, delimiter=',', quotechar='"', lineterminator='\r\n')
    for line in final_lines:
        w.writerow([line])
    return buff.getvalue().encode("utf-8")

def build_onecol_xlsx_or_none(final_lines):
    """Gera XLSX 1 coluna id√™ntico. Se alguma c√©lula exceder o limite do Excel, N√ÉO cria XLSX (retorna None)."""
    try:
        import openpyxl
    except Exception as e:
        st.error(f"openpyxl n√£o dispon√≠vel: {e}")
        return None

    # verifica√ß√£o pr√©via de limite: n√£o alteramos dados
    if any(len(s) > EXCEL_CELL_LIMIT for s in final_lines):
        return None  # deixa o usu√°rio com o CSV can√¥nico

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Dados"
    for line in final_lines:
        ws.append([line])

    bio = io.BytesIO()
    wb.save(bio)
    return bio.getvalue()

# -------------------------------
# UI
# -------------------------------
st.set_page_config(page_title="Limpeza CSV SAC (1 coluna)", page_icon="üßπ", layout="wide")
st.title("üßπ Limpeza & Reconstru√ß√£o (1 coluna, sem alterar conte√∫do)")

st.markdown("""
**Como funciona:**  
1) Fa√ßa upload dos CSVs **crus** (CQT/SPE).  
2) O app **s√≥ reconstr√≥i** as linhas (detectando in√≠cio por ‚ÄúLog√≠stica/Logistica‚Äù) e corrige o **cabe√ßalho**.  
3) Entrega **apenas arquivos de 1 coluna**:
   - `*_final_onecol.csv` (can√¥nico ‚Äî use este em primeiro lugar),
   - `*_final_onecol.xlsx` (id√™ntico; **s√≥ √© gerado** se nenhuma linha ultrapassar o limite do Excel).
""")

uploads = st.file_uploader("Envie um ou mais CSVs (crus)", type=["csv"], accept_multiple_files=True)
run = st.button("üöÄ Processar", type="primary", use_container_width=True)

if run:
    if not uploads:
        st.error("Envie pelo menos 1 CSV.")
    else:
        for upl in uploads:
            name = upl.name
            data = upl.read()

            # 1) leitura
            text = detect_decode(data)
            lines = [ln.strip() for ln in normalize_newlines(text).split("\n") if ln.strip()]

            # 2) primeiro campo antes de ';'
            if not lines:
                st.warning(f"`{name}` est√° vazio.")
                continue
            ff = [first_field(ln) for ln in lines]

            header = clean_header_by_name(ff[0], name)
            body = ff[1:]

            # 3) for√ßa o cabe√ßalho final que voc√™ definiu
            final_header = FINAL_HEADER

            # 4) reconstru√ß√£o 100% literal (sem inserir/remover caracteres)
            rebuilt = rebuild_records(body)

            if not rebuilt:
                st.warning(f"`{name}` n√£o gerou registros ap√≥s reconstru√ß√£o.")
                continue

            final_lines = [final_header] + rebuilt

            # CSV (sempre)
            csv_bytes = build_onecol_csv(final_lines)
            st.download_button(
                f"‚¨áÔ∏è {name.replace('.csv','')}_final_onecol.csv",
                csv_bytes,
                file_name=f"{name.replace('.csv','')}_final_onecol.csv",
                mime="text/csv",
                use_container_width=True
            )

            # XLSX (s√≥ se n√£o estourar o limite do Excel)
            xlsx_bytes = build_onecol_xlsx_or_none(final_lines)
            if xlsx_bytes is not None:
                st.download_button(
                    f"‚¨áÔ∏è {name.replace('.csv','')}_final_onecol.xlsx",
                    xlsx_bytes,
                    file_name=f"{name.replace('.csv','')}_final_onecol.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True
                )
            else:
                st.info("‚ö†Ô∏è Algumas linhas excedem o limite de 32.767 caracteres do Excel por c√©lula. "
                        "Por isso o **XLSX** n√£o foi gerado para este arquivo. "
                        "Use o **CSV** (√© id√™ntico e sem limite).")
