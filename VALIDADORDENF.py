import pandas as pd
import streamlit as st
import unicodedata
import difflib
import io
import re

# Fun√ß√£o para normalizar texto
def normalizar_texto(texto):
    if not isinstance(texto, str):
        return ""
    texto = unicodedata.normalize('NFKD', texto).encode('ASCII', 'ignore').decode('utf-8')
    return texto.strip().lower()

# Configura√ß√£o do Streamlit
st.set_page_config(page_title="Leitor Inteligente de Colunas", layout="centered")
st.title("üîç Extra√ß√£o de Colunas M√∫ltiplas")

# Lista de colunas que queremos encontrar
colunas_procuradas_originais = [
    "Nota Fiscal Ent/Sa√≠da",
    "Data de Emiss√£o",
    "Clien/Fornec",
    "Tipo de Transa√ß√£o",
    "Descri√ß√£o TM",
    "Tipo Opera√ß√£o",
    "PEG",
    "Descri√ß√£o Produto",
    "Qtde",
    "Valor Unit√°rio",
    "Valor Total Produtos",
    "Desconto",
    "Valor L√≠quido dos Produtos",
    "Cliente contribuinte ICMS?",
    "Mov Estoque",
    "Descri√ß√£o do Segmento",
    "Descr do Tipo de Prod",
    "Cole√ß√£o",
    "Observa√ß√£o"
]
colunas_procuradas_norm = [normalizar_texto(c) for c in colunas_procuradas_originais]

uploaded_file = st.file_uploader("Selecione o arquivo", type=["csv", "tsv", "txt"])

if uploaded_file is not None:
    try:
        # Ler conte√∫do como texto bruto
        conteudo = uploaded_file.read().decode("utf-8-sig")

        # Remover aspas externas e converter para DataFrame
        conteudo_limpo = conteudo.replace('"', '')

        # Usar ponto e v√≠rgula como separador
        df = pd.read_csv(io.StringIO(conteudo_limpo), sep=";", engine="python")

        # Mostrar colunas detectadas
        st.subheader("üìë Colunas detectadas no arquivo:")
        colunas_originais = list(df.columns)
        st.write(colunas_originais)

        # Criar dicion√°rio {normalizado: original}
        colunas_normalizadas = {normalizar_texto(c): c for c in colunas_originais}

        colunas_encontradas = []
        colunas_nao_encontradas = []

        # Procurar todas as colunas desejadas
        for col_norm, col_original in zip(colunas_procuradas_norm, colunas_procuradas_originais):
            if col_norm in colunas_normalizadas:
                colunas_encontradas.append(colunas_normalizadas[col_norm])
            else:
                # Busca aproximada
                coluna_mais_parecida = difflib.get_close_matches(col_norm, colunas_normalizadas.keys(), n=1, cutoff=0.6)
                if coluna_mais_parecida:
                    colunas_encontradas.append(colunas_normalizadas[coluna_mais_parecida[0]])
                    st.warning(f"‚ö†Ô∏è Coluna '{col_original}' n√£o foi encontrada exatamente, mas encontramos algo parecido: '{colunas_normalizadas[coluna_mais_parecida[0]]}'")
                else:
                    colunas_nao_encontradas.append(col_original)

        if colunas_encontradas:
            st.success(f"‚úÖ Colunas encontradas: {colunas_encontradas}")
            df_colunas = df[colunas_encontradas]

            # Corre√ß√£o da coluna PEG, se existir
            if "PEG" in df_colunas.columns:
                df_colunas["PEG"] = df_colunas["PEG"].astype(str).apply(
                    lambda x: re.sub(r'^0+(\d+)$', r'\1', re.sub(r'^=?"?(\d+)"?$', r'\1', x.strip()))
                )

            # Filtros adicionais
            filtros_tm = [
                "Devolu√ß√£o de venda",
                "Outras Entradas - Dev Remessa Escola",
                "Devolu√ß√£o de Bonifica√ß√£o",
                "Outras Entradas - Devolu√ß√£o Remessa Antecipada"
            ]

            if "Descri√ß√£o TM" in df_colunas.columns and "Mov Estoque" in df_colunas.columns:
                df_colunas = df_colunas[
                    (df_colunas["Descri√ß√£o TM"].isin(filtros_tm))
                    
                ]

            # Criar arquivo Excel em mem√≥ria
            excel_buffer = io.BytesIO()
            df_colunas.to_excel(excel_buffer, index=False, engine="xlsxwriter")
            excel_buffer.seek(0)

            # Bot√£o para baixar Excel
            st.download_button(
                label="üì• Baixar colunas filtradas (Excel)",
                data=excel_buffer,
                file_name="colunas_filtradas.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

        if colunas_nao_encontradas:
            st.error(f"‚ùå Colunas n√£o encontradas: {colunas_nao_encontradas}")

    except Exception as e:
        st.error(f"‚ö†Ô∏è Erro: {str(e)}")
